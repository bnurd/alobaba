// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRED
}

model User {
  id            String          @id @default(ulid()) @db.VarChar(26)
  email         String          @unique @db.VarChar(255)
  password      String
  name          String?         @db.VarChar(255)
  phone         String?         @db.VarChar(255)
  address       String?
  storeName     String?         @db.VarChar(255)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Cart          Cart[]
  Product       Product[]
  Order         Order[]
  ProductReview ProductReview[]
}

model Product {
  id                   String            @id @default(ulid())
  sku                  String            @unique @db.VarChar(255)
  slug                 String            @unique @db.VarChar(255)
  name                 String
  description          String
  price                Decimal           @db.Decimal(10, 2)
  imageUrl             String?
  stockQuantity        Int?              @default(0)
  minumumOrderQuantity Int?              @default(0)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  userId               String?           @db.VarChar(26)
  User                 User?             @relation(fields: [userId], references: [id])
  ProductImages        ProductImages[]
  ProductCategory      ProductCategory[]
  Cart                 Cart[]
  OrderItem            OrderItem[]
  ProductReview        ProductReview[]
}

model ProductImages {
  id        String   @id @default(ulid()) @db.VarChar(26)
  productId String   @db.VarChar(26)
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
}

model Category {
  id              String            @id @default(ulid()) @db.VarChar(26)
  name            String            @db.VarChar(255)
  slug            String            @unique @db.VarChar(255)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ProductCategory ProductCategory[]
}

model ProductCategory {
  id         String   @id @default(ulid()) @db.VarChar(26)
  productId  String   @db.VarChar(26)
  categoryId String   @db.VarChar(26)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Product    Product  @relation(fields: [productId], references: [id])
  Category   Category @relation(fields: [categoryId], references: [id])
}

model Cart {
  id        String   @id @default(ulid()) @db.VarChar(26)
  userId    String   @db.VarChar(26)
  productId String   @db.VarChar(26)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id        String      @id @default(ulid()) @db.VarChar(26)
  userId    String      @db.VarChar(26)
  payTotal  Decimal     @db.Decimal(10, 2)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  User      User        @relation(fields: [userId], references: [id])
  OrderItem OrderItem[]
  Payment   Payment[]
}

model OrderItem {
  id         String   @id @default(ulid()) @db.VarChar(26)
  orderId    String   @db.VarChar(26)
  productId  String   @db.VarChar(26)
  quantity   Int
  priceTotal Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Order      Order    @relation(fields: [orderId], references: [id])
  Product    Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id                 String        @id @default(ulid()) @db.VarChar(26)
  orderId            String        @db.VarChar(26)
  paymentReferenceId String        @unique @db.VarChar(255)
  paymentType        String
  payTotal           Decimal       @db.Decimal(10, 2)
  status             PaymentStatus
  paymentData        Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  Order              Order         @relation(fields: [orderId], references: [id])
}

model ProductReview {
  id        String   @id @default(ulid()) @db.VarChar(26)
  productId String   @db.VarChar(26)
  userId    String   @db.VarChar(26)
  review    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}
